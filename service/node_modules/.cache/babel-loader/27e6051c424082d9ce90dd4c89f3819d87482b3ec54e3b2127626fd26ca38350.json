{"ast":null,"code":"var _jsxFileName = \"/home/kai/Documents/Github/simon-react/src/play/simonGame.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { SimonButton } from './simonButton';\nimport { delay } from './delay';\nimport { GameEvent, GameNotifier } from './gameNotifier';\nimport './simonGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function SimonGame(props) {\n  _s();\n  const userName = props.userName;\n  const buttons = new Map();\n  const mistakeSound = new Audio(`/error.mp3`);\n  const [allowPlayer, setAllowPlayer] = React.useState(false);\n  const [sequence, setSequence] = React.useState([]);\n  const [playbackPos, setPlaybackPos] = React.useState(0);\n  async function onPressed(buttonPosition) {\n    if (allowPlayer) {\n      setAllowPlayer(false);\n      await buttons.get(buttonPosition).ref.current.press();\n      if (sequence[playbackPos].position === buttonPosition) {\n        if (playbackPos + 1 === sequence.length) {\n          setPlaybackPos(0);\n          increaseSequence(sequence);\n        } else {\n          setPlaybackPos(playbackPos + 1);\n          setAllowPlayer(true);\n        }\n      } else {\n        saveScore(sequence.length - 1);\n        mistakeSound.play();\n        await buttonDance();\n      }\n    }\n  }\n  async function reset() {\n    setAllowPlayer(false);\n    setPlaybackPos(0);\n    await buttonDance(1);\n    increaseSequence([]);\n\n    // Let other players know a new game has started\n    GameNotifier.broadcastEvent(userName, GameEvent.Start, {});\n  }\n  function increaseSequence(previousSequence) {\n    const newSequence = [...previousSequence, getRandomButton()];\n    setSequence(newSequence);\n  }\n\n  // Demonstrates updating state objects based on changes to other state.\n  // All setState calls are asynchronous and so you need to wait until\n  // that state is updated before you can update dependent functionality.\n  React.useEffect(() => {\n    if (sequence.length > 0) {\n      const playSequence = async () => {\n        await delay(500);\n        for (const btn of sequence) {\n          await btn.ref.current.press();\n        }\n        setAllowPlayer(true);\n      };\n      playSequence();\n    }\n  }, [sequence]);\n  async function buttonDance() {\n    let laps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    for (let step = 0; step < laps; step++) {\n      for (const btn of buttons.values()) {\n        await btn.ref.current.press(100, false);\n      }\n    }\n  }\n  function getRandomButton() {\n    let b = Array.from(buttons.values());\n    return b[Math.floor(Math.random() * b.length)];\n  }\n  async function saveScore(score) {\n    const date = new Date().toLocaleDateString();\n    const newScore = {\n      name: userName,\n      score: score,\n      date: date\n    };\n    try {\n      const response = await fetch('/api/score', {\n        method: 'POST',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(newScore)\n      });\n\n      // Let other players know the game has concluded\n      GameNotifier.broadcastEvent(userName, GameEvent.End, newScore);\n\n      // Store what the service gave us as the high scores\n      const scores = await response.json();\n      localStorage.setItem('scores', JSON.stringify(scores));\n    } catch {\n      // If there was an error then just track scores locally\n      updateScoresLocal(newScore);\n    }\n  }\n  function updateScoresLocal(newScore) {\n    let scores = [];\n    const scoresText = localStorage.getItem('scores');\n    if (scoresText) {\n      scores = JSON.parse(scoresText);\n    }\n    let found = false;\n    for (const [i, prevScore] of scores.entries()) {\n      if (newScore > prevScore.score) {\n        scores.splice(i, 0, newScore);\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      scores.push(newScore);\n    }\n    if (scores.length > 10) {\n      scores.length = 10;\n    }\n    localStorage.setItem('scores', JSON.stringify(scores));\n  }\n\n  // We use React refs so the game can drive button press events\n  buttons.set('button-top-left', {\n    position: 'button-top-left',\n    ref: React.useRef()\n  });\n  buttons.set('button-top-right', {\n    position: 'button-top-right',\n    ref: React.useRef()\n  });\n  buttons.set('button-bottom-left', {\n    position: 'button-bottom-left',\n    ref: React.useRef()\n  });\n  buttons.set('button-bottom-right', {\n    position: 'button-bottom-right',\n    ref: React.useRef()\n  });\n  const buttonArray = Array.from(buttons, _ref => {\n    let [key, value] = _ref;\n    return /*#__PURE__*/_jsxDEV(SimonButton, {\n      ref: value.ref,\n      position: key,\n      onPressed: () => onPressed(key)\n    }, key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 12\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"button-container\",\n      children: [/*#__PURE__*/_jsxDEV(_Fragment, {\n        children: buttonArray\n      }, void 0, false), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-name\",\n          children: [\"Simon\", /*#__PURE__*/_jsxDEV(\"sup\", {\n            children: \"\\xAE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 18\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"score center\",\n          children: sequence.length === 0 ? '--' : sequence.length - 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          onClick: () => reset(),\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 5\n  }, this);\n}\n_s(SimonGame, \"TgJicFT+itJ0m+l+VB07sEbDpW8=\");\n_c = SimonGame;\nvar _c;\n$RefreshReg$(_c, \"SimonGame\");","map":{"version":3,"names":["React","Button","SimonButton","delay","GameEvent","GameNotifier","SimonGame","props","userName","buttons","Map","mistakeSound","Audio","allowPlayer","setAllowPlayer","useState","sequence","setSequence","playbackPos","setPlaybackPos","onPressed","buttonPosition","get","ref","current","press","position","length","increaseSequence","saveScore","play","buttonDance","reset","broadcastEvent","Start","previousSequence","newSequence","getRandomButton","useEffect","playSequence","btn","laps","step","values","b","Array","from","Math","floor","random","score","date","Date","toLocaleDateString","newScore","name","response","fetch","method","headers","body","JSON","stringify","End","scores","json","localStorage","setItem","updateScoresLocal","scoresText","getItem","parse","found","i","prevScore","entries","splice","push","set","useRef","buttonArray","key","value"],"sources":["/home/kai/Documents/Github/simon-react/src/play/simonGame.jsx"],"sourcesContent":["import React from 'react';\n\nimport { Button } from 'react-bootstrap';\nimport { SimonButton } from './simonButton';\nimport { delay } from './delay';\nimport { GameEvent, GameNotifier } from './gameNotifier';\nimport './simonGame.css';\n\nexport function SimonGame(props) {\n  const userName = props.userName;\n  const buttons = new Map();\n  const mistakeSound = new Audio(`/error.mp3`);\n\n  const [allowPlayer, setAllowPlayer] = React.useState(false);\n  const [sequence, setSequence] = React.useState([]);\n  const [playbackPos, setPlaybackPos] = React.useState(0);\n\n  async function onPressed(buttonPosition) {\n    if (allowPlayer) {\n      setAllowPlayer(false);\n      await buttons.get(buttonPosition).ref.current.press();\n\n      if (sequence[playbackPos].position === buttonPosition) {\n        if (playbackPos + 1 === sequence.length) {\n          setPlaybackPos(0);\n          increaseSequence(sequence);\n        } else {\n          setPlaybackPos(playbackPos + 1);\n          setAllowPlayer(true);\n        }\n      } else {\n        saveScore(sequence.length - 1);\n        mistakeSound.play();\n        await buttonDance();\n      }\n    }\n  }\n\n  async function reset() {\n    setAllowPlayer(false);\n    setPlaybackPos(0);\n    await buttonDance(1);\n    increaseSequence([]);\n\n    // Let other players know a new game has started\n    GameNotifier.broadcastEvent(userName, GameEvent.Start, {});\n  }\n\n  function increaseSequence(previousSequence) {\n    const newSequence = [...previousSequence, getRandomButton()];\n    setSequence(newSequence);\n  }\n\n  // Demonstrates updating state objects based on changes to other state.\n  // All setState calls are asynchronous and so you need to wait until\n  // that state is updated before you can update dependent functionality.\n  React.useEffect(() => {\n    if (sequence.length > 0) {\n      const playSequence = async () => {\n        await delay(500);\n        for (const btn of sequence) {\n          await btn.ref.current.press();\n        }\n        setAllowPlayer(true);\n      };\n      playSequence();\n    }\n  }, [sequence]);\n\n  async function buttonDance(laps = 5) {\n    for (let step = 0; step < laps; step++) {\n      for (const btn of buttons.values()) {\n        await btn.ref.current.press(100, false);\n      }\n    }\n  }\n\n  function getRandomButton() {\n    let b = Array.from(buttons.values());\n    return b[Math.floor(Math.random() * b.length)];\n  }\n\n  async function saveScore(score) {\n    const date = new Date().toLocaleDateString();\n    const newScore = { name: userName, score: score, date: date };\n\n    try {\n      const response = await fetch('/api/score', {\n        method: 'POST',\n        headers: { 'content-type': 'application/json' },\n        body: JSON.stringify(newScore),\n      });\n\n      // Let other players know the game has concluded\n      GameNotifier.broadcastEvent(userName, GameEvent.End, newScore);\n\n      // Store what the service gave us as the high scores\n      const scores = await response.json();\n      localStorage.setItem('scores', JSON.stringify(scores));\n    } catch {\n      // If there was an error then just track scores locally\n      updateScoresLocal(newScore);\n    }\n  }\n\n  function updateScoresLocal(newScore) {\n    let scores = [];\n    const scoresText = localStorage.getItem('scores');\n    if (scoresText) {\n      scores = JSON.parse(scoresText);\n    }\n\n    let found = false;\n    for (const [i, prevScore] of scores.entries()) {\n      if (newScore > prevScore.score) {\n        scores.splice(i, 0, newScore);\n        found = true;\n        break;\n      }\n    }\n\n    if (!found) {\n      scores.push(newScore);\n    }\n\n    if (scores.length > 10) {\n      scores.length = 10;\n    }\n\n    localStorage.setItem('scores', JSON.stringify(scores));\n  }\n\n  // We use React refs so the game can drive button press events\n  buttons.set('button-top-left', { position: 'button-top-left', ref: React.useRef() });\n  buttons.set('button-top-right', { position: 'button-top-right', ref: React.useRef() });\n  buttons.set('button-bottom-left', { position: 'button-bottom-left', ref: React.useRef() });\n  buttons.set('button-bottom-right', { position: 'button-bottom-right', ref: React.useRef() });\n\n  const buttonArray = Array.from(buttons, ([key, value]) => {\n    return <SimonButton key={key} ref={value.ref} position={key} onPressed={() => onPressed(key)}></SimonButton>;\n  });\n\n  return (\n    <div className='game'>\n      <div className='button-container'>\n        <>{buttonArray}</>\n        <div className='controls center'>\n          <div className='game-name'>\n            Simon<sup>&reg;</sup>\n          </div>\n          <div className='score center'>{sequence.length === 0 ? '--' : sequence.length - 1}</div>\n          <Button variant='primary' onClick={() => reset()}>\n            Reset\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}